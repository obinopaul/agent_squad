This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.js
index.html
package.json
public/favicon.svg
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/react.svg
src/index.css
src/main.tsx
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>IVR Demo</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@livekit/components-react": "^2.8.0",
    "@livekit/components-styles": "^1.1.4",
    "@types/mermaid": "^9.1.0",
    "livekit-client": "^2.8.1",
    "mermaid": "^11.4.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}
</file>

<file path="public/favicon.svg">
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg height="800px" width="800px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
	 viewBox="0 0 511.999 511.999" xml:space="preserve">
<path style="fill:#B0DACC;" d="M342.315,337.711l-25.981,25.977c-2.223-1.212-4.625-2.415-7.048-3.777
	c-22.302-12.368-66.331-42.73-98.447-74.846c-32.186-32.195-62.665-76.239-75.022-98.541c-1.332-2.344-1.876-3.877-3.088-6.071
	l24.371-22.904l2.525-2.525c19.309-19.309,19.309-50.613,0-69.923l-38.077-38.076c-19.416-19.416-50.935-19.291-70.197,0.278
	l-10.149,10.31c-6.61,8.452-12.216,18.284-16.321,28.768c-3.795,10.015-6.223,19.601-7.274,29.146
	c-9.274,76.667,25.755,146.747,120.809,241.84c131.435,131.395,236.67,122.286,241.246,121.774
	c9.934-1.172,20.155-4.323,29.86-8.077c10.405-4.066,20.321-9.756,28.733-16.366l10.315-10.142
	c19.587-19.259,19.719-50.793,0.295-70.216l-36.63-36.63C392.927,318.405,361.624,318.405,342.315,337.711z"/>
<g>
	<path style="fill:#211E48;" d="M372.047,495.597c-0.003,0-0.005,0-0.006,0c-27.727,0-127.338-9.149-245.036-126.81
		C28.013,269.755-8.332,195.837,1.571,113.681c1.196-10.789,3.884-21.59,8.218-33.02c0.021-0.053,0.042-0.108,0.063-0.163
		c4.615-11.79,11.061-23.141,18.636-32.83c0.378-0.483,0.781-0.943,1.211-1.379l10.149-10.31
		c12.426-12.625,29.025-19.577,46.741-19.577c17.519,0,33.987,6.822,46.374,19.207l38.076,38.077
		c12.386,12.387,19.209,28.857,19.209,46.375s-6.822,33.987-19.209,46.375l-2.526,2.525c-0.118,0.116-0.236,0.234-0.357,0.347
		l-15.335,14.412c12.583,21.277,39.75,60.234,69.435,89.929c30.105,30.105,70.192,57.821,91.219,70.069l17.427-17.425
		c12.387-12.386,28.856-19.206,46.373-19.206c17.519,0,33.987,6.822,46.374,19.207l36.631,36.63
		c12.462,12.463,19.283,29.03,19.207,46.654c-0.074,17.621-7.036,34.131-19.601,46.486l-10.315,10.14
		c-0.426,0.42-0.875,0.814-1.345,1.183c-9.737,7.65-21.09,14.119-32.831,18.709c-12.728,4.925-23.782,7.887-33.843,9.073
		C380.589,495.282,377.361,495.597,372.047,495.597z M39.945,92.186c-3.348,8.847-5.406,17.062-6.292,25.111
		c-0.006,0.057-0.013,0.113-0.019,0.169c-8.602,71.12,25.064,137.317,116.2,228.494
		c108.922,108.886,197.619,117.353,222.208,117.353c0.002,0,0.003,0,0.005,0c3.81,0,5.814-0.21,5.834-0.211
		c7.222-0.852,15.701-3.175,25.816-7.09c8.513-3.327,16.776-7.982,23.906-13.477l9.65-9.487c6.381-6.274,9.914-14.655,9.953-23.603
		c0.039-8.949-3.425-17.361-9.753-23.688l-36.63-36.63c-6.289-6.289-14.652-9.753-23.546-9.753c-8.894,0-17.256,3.464-23.545,9.751
		l-25.981,25.977c-5.062,5.065-12.854,6.184-19.14,2.759c-0.846-0.462-1.719-0.92-2.61-1.388c-1.508-0.794-3.059-1.613-4.618-2.489
		c-22.018-12.21-67.425-42.977-101.953-77.504c-34.51-34.521-65.944-80.886-77.69-102.065c-0.969-1.711-1.63-3.098-2.165-4.216
		c-0.294-0.615-0.578-1.228-0.972-1.939c-3.567-6.458-2.303-14.515,3.073-19.569l24.187-22.734l2.349-2.347
		c6.287-6.289,9.751-14.651,9.751-23.545c0-8.896-3.464-17.256-9.753-23.546l-38.077-38.077c-6.289-6.289-14.651-9.753-23.545-9.753
		c-8.994,0-17.424,3.53-23.734,9.939l-9.477,9.627C47.955,75.333,43.321,83.587,39.945,92.186z"/>
	<path style="fill:#211E48;" d="M403.287,258.505c-4.376,0-8.775-1.022-12.856-3.091c-9.548-4.843-15.492-14.484-15.535-25.183
		h-78.273c-24.305,0-44.077-19.772-44.077-44.077v-29.729c0-24.305,19.774-44.077,44.077-44.077h10.444
		c8.915,0,16.142,7.228,16.142,16.142c0,8.914-7.227,16.142-16.142,16.142h-10.444c-6.504,0-11.793,5.29-11.793,11.793v29.729
		c0,6.502,5.29,11.793,11.793,11.793h94.415c8.915,0,16.142,7.228,16.142,16.142v8.307l69.821-51.104l-69.821-51.106v8.305
		c0,8.914-7.227,16.142-16.142,16.142H364.94c-8.915,0-16.142-7.228-16.142-16.142s7.227-16.142,16.142-16.142h9.956
		c0.042-10.697,5.987-20.339,15.535-25.183c9.584-4.862,20.922-3.935,29.59,2.408l80.365,58.823
		c7.272,5.324,11.614,13.882,11.613,22.894c-0.002,9.012-4.342,17.569-11.614,22.891l-80.365,58.822
		C415.045,256.647,409.187,258.505,403.287,258.505z"/>
</g>
</svg>
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```
</file>

<file path="src/App.css">
/* Reset body styles */
body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh;
  overflow-x: hidden;
  background-color: white;
}

/* Root styles */
#root {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* LiveKit room container */
.lk-room-container {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* App container styles */
.app-container {
  width: 100%;
  height: 100%;
  background-color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2rem;
}

/* Content wrapper styles */
.content-wrapper {
  width: 100%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
}

/* Visualizer container styles */
.visualizer-container {
  width: 100%;
  background-color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Control container */
.control-container {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Agent control bar */
.lk-agent-control-bar {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background: none;
  border: none !important;
}

/* LiveKit control bar overrides */
.lk-control-bar {
  border: none !important;
  background: none !important;
  padding: 0 !important;
  display: flex;
  justify-content: center;
}

/* Call controls */
.call-controls {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
}

.call-controls input {
  width: 100%;
  height: 38px;
  padding: 0.5rem;
  border: 1px solid var(--lk-border-color);
  border-radius: var(--lk-border-radius);
  font-size: 1rem;
  color: #000;
  background-color: white;
  text-align: center;
}

.call-controls input::placeholder {
  color: #999;
  text-align: center;
}

.call-controls input:focus {
  outline: none;
  border-color: var(--lk-control-active-bg);
}

.call-controls .lk-button {
  width: 100%;
  height: 38px;
  padding: 0 1rem;
  border-radius: var(--lk-border-radius);
  border: 1px solid var(--lk-border-color);
  background-color: var(--lk-control-bg);
}

.call-controls .lk-button:hover:not(:disabled) {
  background-color: var(--lk-control-hover-bg);
}

.call-controls .lk-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Task input container */
.task-input-container {
  display: flex;
  flex-direction: column;
  gap: 0.5rem; /* Added padding between input and button */
  width: 100%;
}

/* Connect/Disconnect button styles */
.connect-button {
  background-color: #2ecc71 !important;
  color: white !important;
  border: none !important;
  height: 38px;
  padding: 0 1rem;
  width: 100%;
}

.connect-button:hover {
  background-color: #27ae60 !important;
}

/* Connected status label */
.connected-status {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  background-color: #f0fff4;
  color: #2ecc71;
  border-radius: var(--lk-border-radius);
  font-weight: 500;
  width: 100%;
  text-align: center;
  max-width: 100%;
  box-sizing: border-box;
}

.connected-status::before {
  content: '';
  width: 8px;
  height: 8px;
  background-color: #2ecc71;
  border-radius: 50%;
  display: inline-block;
}

/* Task display */
.task-display {
  padding: 0.5rem 1rem;
  background-color: #f8f9fa;
  border-radius: var(--lk-border-radius);
  width: 100%;
  text-align: center;
  box-sizing: border-box;
  font-weight: 500;
}

/* DTMF Display */
.dtmf-display-container {
  height: 50px;  /* Fixed height to prevent layout shifts */
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 1rem;
}

.dtmf-display {
  padding: 0.5rem 1rem;
  background-color: #e8f5ff;
  border-radius: var(--lk-border-radius);
  color: #4a90e2;
  font-weight: 500;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

.dtmf-display.visible {
  opacity: 1;
}

/* Override LiveKit dark theme */
[data-lk-theme="default"] {
  --lk-bg: white;
  --lk-bg2: white;
  --lk-fg: #213547;
  --lk-border-color: rgba(0, 0, 0, 0.1);
  
  /* Control colors */
  --lk-control-bg: #f8f9fa;
  --lk-control-hover-bg: #e9ecef;
  --lk-control-active-bg: #4a90e2;
  --lk-control-active-hover-bg: #357abd;
  --lk-control-active-fg: white;
  
  /* Button text colors */
  --lk-button-text: #213547;
  --lk-button-text-hover: #213547;
  
  /* Disconnect button colors */
  --lk-disconnect-bg: #e74c3c;
  --lk-disconnect-hover-bg: #c0392b;
}
</file>

<file path="src/App.tsx">
import { LiveKitRoom, RoomAudioRenderer } from '@livekit/components-react';
import '@livekit/components-styles';
import { useVoiceAssistant, BarVisualizer, VoiceAssistantControlBar, useDataChannel } from "@livekit/components-react";
import { Room, RoomEvent, RemoteParticipant, DataPacket_Kind } from 'livekit-client';
import { useState, useEffect } from 'react';
import './App.css';

function CustomControlBar({ isConnected, onConnect, onDisconnect }: { 
  isConnected: boolean;
  onConnect: () => void;
  onDisconnect: () => void;
}) {
  if (isConnected) {
    return <VoiceAssistantControlBar />;
  }
  
  return (
    <div className="lk-control-bar">
      <button 
        className="lk-button connect-button"
        onClick={onConnect}
      >
        Connect
      </button>
    </div>
  );
}

function SimpleVoiceAssistant({ 
  isConnected, 
  onConnect, 
  onDisconnect,
  currentRoomName
}: { 
  isConnected: boolean;
  onConnect: () => void;
  onDisconnect: () => void;
  onCallResponse: (roomInfo: { name: string; token: string }) => void;
  currentRoomName: string;
}) {
  const { state, audioTrack } = useVoiceAssistant();
  const [room, setRoom] = useState<Room | null>(null);
  const [phoneNumber, setPhoneNumber] = useState('+16136136136');
  const [task, setTask] = useState('');
  const [taskSubmitted, setTaskSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [callStatus, setCallStatus] = useState<'idle' | 'calling' | 'connecting'>('idle');
  const [dtmfCode, setDtmfCode] = useState<string | null>(null);

  // Use the data channel hook for DTMF updates
  useDataChannel('dtmf_code', (message) => {
    const code = new TextDecoder().decode(message.payload);
    setDtmfCode(code);
  });

  useEffect(() => {
    let timeout: ReturnType<typeof setTimeout>;
    if (dtmfCode !== null) {
      // Clear the DTMF code after 3 seconds
      timeout = setTimeout(() => {
        setDtmfCode(null);
      }, 3000);
    }
    return () => {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [dtmfCode]);

  const handleTaskSubmit = () => {
    if (task.trim()) {
      setTaskSubmitted(true);
    }
  };

  const handleCall = async () => {
    if (!phoneNumber || !currentRoomName || !task) return;
    
    setIsLoading(true);
    setCallStatus('calling');
    try {
      const response = await fetch('http://localhost:5001/api/call', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone_number: phoneNumber,
          room_name: currentRoomName,
          task: task,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to initiate call');
      }

      const data = await response.json();
      console.log('Call initiated:', data);
      
      if (data.status === 'success') {
        setCallStatus('connecting');
        // Clear the phone number after successful call, but keep the task displayed
        setPhoneNumber('');
      }
    } catch (error) {
      console.error('Error initiating call:', error);
      setCallStatus('idle');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="app-container">
      <div className="content-wrapper">
        <div className="visualizer-container">
          <BarVisualizer
            state={state}
            barCount={7}
            trackRef={audioTrack}
            style={{ width: '100%', height: '200px' }}
          />
          <div className="dtmf-display-container">
            {dtmfCode && (
              <div className={`dtmf-display ${dtmfCode ? 'visible' : ''}`}>
                DTMF Code pressed: {dtmfCode}
              </div>
            )}
          </div>
        </div>
        <div className="control-container">
          <div className="lk-agent-control-bar">
            <CustomControlBar 
              isConnected={isConnected}
              onConnect={onConnect}
              onDisconnect={onDisconnect}
            />
          </div>
          <div className="call-controls">
            {/* Always show the task display if taskSubmitted is true */}
            {taskSubmitted && (
              <div className="task-display">Task: {task}</div>
            )}

            {/* Show the connected status if callStatus is 'connecting' */}
            {callStatus === 'connecting' && (
              <div className="connected-status">Connected to IVR</div>
            )}

            {/* Show the task input and submit button if task is not submitted AND callStatus is idle */}
            {!taskSubmitted && callStatus === 'idle' && (
              <div className="task-input-container">
                <input
                  type="text"
                  value={task}
                  onChange={(e) => setTask(e.target.value)}
                  placeholder="Enter task description"
                  className="lk-form-control"
                  disabled={callStatus !== 'idle'}
                />
                <button 
                  className="lk-button" 
                  onClick={handleTaskSubmit}
                  disabled={!task.trim() || callStatus !== 'idle'}
                >
                  Submit Task
                </button>
              </div>
            )}

            {/* Show the phone number input and call button if task is submitted AND callStatus is not 'connecting' */}
            {taskSubmitted && callStatus !== 'connecting' && (
              <>
                <input
                  type="tel"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  placeholder="Enter phone number"
                  className="lk-form-control"
                  disabled={callStatus !== 'idle'}
                />
                <button 
                  className="lk-button" 
                  onClick={handleCall}
                  disabled={isLoading || !phoneNumber || callStatus !== 'idle'}
                >
                  {callStatus === 'calling' ? 'Calling...' : 'Call'}
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default function App() {
  const serverUrl = import.meta.env.VITE_LIVEKIT_URL || '';
  const [token, setToken] = useState('');
  const [roomName, setRoomName] = useState('');
  const [isConnected, setIsConnected] = useState(false);

  const handleDisconnect = () => {
    setToken('');
    setIsConnected(false);
  };

  const handleConnect = async () => {
    const newRoomName = `room-${Math.random().toString(36).substring(7)}`;
    const identity = `user-${Math.random().toString(36).substring(7)}`;
    setRoomName(newRoomName);
    
    try {
      const response = await fetch('http://localhost:5001/api/generate-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          room_name: newRoomName,
          identity: identity,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to get token');
      }

      const data = await response.json();
      if (data.token) {
        setToken(data.token);
        setIsConnected(true);
      }
    } catch (error) {
      console.error('Error getting token:', error);
    }
  };

  const handleCallResponse = (roomInfo: { name: string; token: string }) => {
    setRoomName(roomInfo.name);
    setToken(roomInfo.token);
    setIsConnected(true);
  };

  return (
    <LiveKitRoom
      audio={true}
      token={token}
      serverUrl={serverUrl}
      data-lk-theme="default"
      style={{ height: '100vh' }}
      onDisconnected={handleDisconnect}
    >
      <SimpleVoiceAssistant 
        isConnected={isConnected}
        onConnect={handleConnect}
        onDisconnect={handleDisconnect}
        onCallResponse={handleCallResponse}
        currentRoomName={roomName}
      />
      <RoomAudioRenderer />
    </LiveKitRoom>
  );
}
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/index.css">
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:5001', // Flask server
        changeOrigin: true,
        secure: false,
      },
    },
  },
});
</file>

</files>
